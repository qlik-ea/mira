version: 2
jobs:
  build:
    docker:
      - image: node:8
    working_directory: ~/mira
    environment:
      DOCKER_REPO: qlikea/mira
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command:
            npm install --quiet
      - run:
          name: Run ESLint
          command:
            npm run lint
      - run:
          name: Run Unit Tests
          command:
            npm run test:unit
      - store_artifacts:
          path: ./coverage
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - setup_remote_docker
      - run:
          name: Install Docker client
          command: ./scripts/cci2-install-docker-client.sh 17.04.0-ce
      - run:
          name: Login to Docker
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
      - run:
          name: Update version tag
          command: |
            set -e
            VER=$(node -e "console.log(require('./package.json').version)")

            # If a git tag is not set or if the tag does not match release pattern e.g. v1.2.3, then add the cci build number to the version.
            RELEASE_PATTERN="v[0-9].*"
            if [[ -z "${CIRCLE_TAG}" || ! $CIRCLE_TAG =~ $RELEASE_PATTERN ]]; then
              VER+="-$CIRCLE_BUILD_NUM"
              npm version $VER --no-git-tag-version
            fi

            echo "$VER" > ./version.txt
      - run:
          name: Build Docker image
          command: |
            VER=$(cat ./version.txt)
            docker build -t $DOCKER_REPO:$VER .
      - run:
          name: Run integration tests on a local setup
          command: |
            # Spin up a local setup with the previously built docker image.
            VER=$(cat ./version.txt)
            TAG=:${VER} docker-compose up -d
            # Find IP address of gateway
            CONTAINER_ID=$(docker ps -aqf "name=mira_mira")
            TEST_HOST=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.Gateway}}{{end}}' "$CONTAINER_ID")
            # Build docker image for test.
            # To be able to interact with services running in a remote docker environment, the tests must be executed from a container in the remote docker as well.
            # For more info see https://circleci.com/docs/2.0/building-docker-images/#separation-of-environments
            docker build --build-arg TEST_HOST="$TEST_HOST" -t test/test-integration -f ./test/integration/Dockerfile .
            # Execute tests
            docker run --rm test/test-integration
      - deploy:
          name: Push image to Docker Hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              VER=$(cat ./version.txt)
              docker tag $DOCKER_REPO:$VER $DOCKER_REPO:latest
            fi
            docker push $DOCKER_REPO
