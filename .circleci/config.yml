version: 2
jobs:

  # Job for build src, run unit & component test and build docker image
  build:
    docker:
      - image: circleci/node:8.16.1
    working_directory: ~/mira
    environment:
      DOCKER_REPO: qlikcore/mira
    steps:
      - checkout
      - restore_cache:
          key: npm-dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Generate version.json
          command: ./generate_version_file.sh
      - run:
          name: Install dependencies
          command:
            npm install --quiet
      - run:
          name: Run ESLint
          command:
            npm run lint
      - run:
          name: Run Unit Tests
          command: |
            npm run test:unit
            if [ ! -z "$COVERALLS_REPO_TOKEN" ]; then
              echo "Uploading coverage results to coveralls.io..."
              npm install -s nyc@11.8.0 coveralls@3.0.1
              npx nyc report --reporter=text-lcov --temp-directory=./coverage/.nyc_output | npx coveralls
            fi
      - store_artifacts:
          path: ./coverage
      - run:
          name: Run Component Tests
          command: npm run test:component
      - save_cache:
          key: npm-dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - setup_remote_docker
      - run:
          name: Update version
          command: |
            set -e
            VER=$(node -e "console.log(require('./package.json').version.replace(/-[0-9]+/, '-$CIRCLE_BUILD_NUM'))")
            mkdir -p workspace
            echo "$VER" > workspace/version.txt
            echo "VER=$VER"
            if (echo $VER | egrep -- '-[0-9]+$' 1> /dev/null); then
              npm version $VER --no-git-tag-version
            fi
      - run:
          name: Build Docker image and save to workspace
          command: |
            VER=$(cat workspace/version.txt)
            docker build -t $DOCKER_REPO:$VER .
            docker save $DOCKER_REPO:$VER -o workspace/mira_image.tar
      - run:
          name: Spin up a local setup
          command: |
            # Spin up a local setup with the previously built docker image.
            VER=$(cat workspace/version.txt)
            TAG=:${VER} MIRA_ENGINE_DISCOVERY_INTERVAL=1000 ACCEPT_EULA=yes docker-compose up -d
      - run:
          name: Check that services are up and running
          command: |
            set +e

            # Check that Mira is healthy
            MIRA_ID=$(docker ps -aqf "name=mira_mira")
            echo "Mira container id is $MIRA_ID"

            RETRIES=0

            while [[ "$MIRA_STATUS" != "healthy" && $RETRIES -le 30 ]]; do
              MIRA_STATUS=$(docker inspect -f '{{.State.Health.Status}}' "$MIRA_ID")
              echo "Mira status is $MIRA_STATUS"
              sleep 2
              RETRIES=$[$RETRIES+1]
            done

            # Check that Engine is running
            ENGINE_ID=$(docker ps -aqf "name=mira_engine2")
            echo "Engine container id is $ENGINE_ID"

            RETRIES=0

            while [[ "$ENGINE_STATUS" != "running" && $RETRIES -le 30 ]]; do
              ENGINE_STATUS=$(docker inspect -f '{{.State.Status}}' "$ENGINE_ID")
              echo "Engine status is $ENGINE_STATUS"
              sleep 2
              RETRIES=$[$RETRIES+1]
            done

            if [[ "$MIRA_STATUS" != "healthy" || "$ENGINE_STATUS" != "running"  ]]; then
              echo "Services did not start up properly"
              exit 1
            fi
      - run:
          name: Build and execute integration tests
          command: |
            # Find IP address of gateway
            CONTAINER_ID=$(docker ps -aqf "name=mira_mira")
            TEST_HOST=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.Gateway}}{{end}}' "$CONTAINER_ID")
            # Build docker image for test.
            # To be able to interact with services running in a remote docker environment, the tests must be executed from a container in the remote docker as well.
            # For more info see https://circleci.com/docs/2.0/building-docker-images/#separation-of-environments
            docker build --build-arg TEST_HOST="$TEST_HOST" -t test/test-integration -f ./test/integration/Dockerfile .
            # Execute tests
            docker run --rm test/test-integration
      # Persist to workspace so other jobs in the workflow can reuse artifacts
      - persist_to_workspace:
          root: workspace
          paths:
            - version.txt
            - mira_image.tar

  # Job for testing Mira in docker swarm
  swarm:
    machine: true
    working_directory: ~/mira
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Import previously built docker image
          command: docker load < /tmp/workspace/mira_image.tar
      - checkout
      - run:
          name: Spin up core in a local docker swarm
          command: |
            docker swarm init
            # Spin up a local setup with the previously built docker image.
            TAG=:$(cat /tmp/workspace/version.txt) ACCEPT_EULA=yes docker stack deploy -c ./examples/swarm/docker-compose-swarm.yml mira-swarm
      - run:
          name: Check health of the Mira service
          command: |
            set +e

            # Verify Mira health
            RETRIES=0
            while (( MIRA_STATUS != "200" && RETRIES != 30 )); do
              MIRA_STATUS=$(curl -s -o /dev/null -w %{http_code} http://localhost:9100/health)
              sleep 2
              RETRIES=$((RETRIES + 1 ))
            done

            if [ "$MIRA_STATUS" != "200" ]; then
              echo "Mira did not return status code 200 on health endpoint"
              exit 1
            fi
      - run:
          name: Verify number of QIX Engines found
          command: |
            ./.circleci/verify_qix_engines.sh "http://localhost:9100"

  # Job for testing Mira in kubernetes mode with helm and plain charts
  kubernetes:
    machine: true
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
      DOCKER_REPO: qlikcore/mira
    working_directory: ~/mira
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Import previously built docker image
          command: docker load < /tmp/workspace/mira_image.tar
      - checkout
      - run:
          name: Install Helm
          command: |
            curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh
            chmod 700 get_helm.sh
            ./get_helm.sh
      - run:
          name: Lint charts
          command: |
            helm lint ./examples/kubernetes/helm/charts/engine --set acceptEULA=yes
      - run:
          name: Install Kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.9.3/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - run:
          name: Install Minikube
          command: |
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.25.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: Start Minikube
          command: |
            sudo minikube start --vm-driver=none --kubernetes-version=v1.9.0 --extra-config=apiserver.Authorization.Mode=RBAC
            sudo minikube update-context
      - run:
          name: Install socat (needed by helm)
          command: |
            sudo apt-get update
            sudo apt-get install socat
      - run:
          name: Install nsenter (needed by helm)
          command: |
            cd /tmp; curl https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.25/util-linux-2.25.tar.gz | tar -zxf-; cd util-linux-2.25;
            sudo apt-get install autopoint autoconf libtool automake
            ./configure --without-python --disable-all-programs --enable-nsenter --without-ncurses
            sudo make nsenter; sudo cp nsenter /usr/local/bin
      - run:
          name: Create service account for cluster-admin role (Helm)
          command: sudo kubectl create -f ./examples/kubernetes/helm/rbac/rbac-config.yaml
      - run:
          name: Helm init and wait for tiller to be running
          command: sudo helm init --service-account tiller --debug; sudo kubectl rollout status -w deployment/tiller-deploy --namespace=kube-system;
      - run:
          name: Helm install charts
          command: |
            VER=$(cat /tmp/workspace/version.txt)
            sudo helm dependency build ./examples/kubernetes/helm/
            sudo helm install ./examples/kubernetes/helm/ --set mira.service.type=NodePort,mira.image.repository=$DOCKER_REPO,mira.image.tag=$VER,engine.acceptEULA=yes --name test --debug
      - run:
          name: Check health of services
          command: |
            # Check mira health
            MIRA_URL=$(sudo minikube service test-mira --url)
            curl -fs "$MIRA_URL/health"
      - run:
          name: Verify number of QIX Engines found
          command: |
            MIRA_URL=$(sudo minikube service test-mira --url)
            ./.circleci/verify_qix_engines.sh $MIRA_URL
      - run:
          name: Helm delete
          command: sudo helm delete test --debug
      - run:
          name: Delete service account for cluster-admin role (Helm)
          command: sudo kubectl delete -f ./examples/kubernetes/helm/rbac/rbac-config.yaml
      - run:
          name: Give default service account view access to Kubernetes API
          command: sudo kubectl create -f ./examples/kubernetes/plain/rbac/rbac-config.yaml
      - run:
          name: Accept EULA for plain and plain namespaced.
          command: grep -rl AcceptEULA ./examples/kubernetes/plain*/ | xargs sed -i 's/AcceptEULA=no/AcceptEULA=yes/g'
      - run:
          name: Kubernetes plain mira
          command: |
            VER=$(cat /tmp/workspace/version.txt)
            sudo kubectl create -f ./examples/kubernetes/plain
            sudo kubectl set image deployment/mira mira="$DOCKER_REPO:$VER"
      - run:
          name: Check health of services
          command: |
            # Check mira health
            MIRA_URL=$(sudo minikube service mira --url)
            curl -fs "$MIRA_URL/health"
      - run:
          name: Verify number of QIX Engines found
          command: |
            MIRA_URL=$(sudo minikube service mira --url)
            ./.circleci/verify_qix_engines.sh $MIRA_URL
      - run:
          name: Cleanup services
          command: |
            sudo kubectl delete -f ./examples/kubernetes/plain --recursive
      - run:
          name: Give default service account view access to Kubernetes API only within the namespace
          command: sudo kubectl create -f ./examples/kubernetes/plain.namespaced/rbac/rbac-config.yaml
      - run:
          name: Kubernetes plain namespaced mira
          command: |
            VER=$(cat /tmp/workspace/version.txt)
            sudo kubectl create -f ./examples/kubernetes/plain.namespaced
            sudo kubectl set image deployment/mira mira="$DOCKER_REPO:$VER"
      - run:
          name: Check health of services
          command: |
            # Check mira health
            MIRA_URL=$(sudo minikube service mira --url)
            curl -fs "$MIRA_URL/health"
      - run:
          name: Verify number of QIX Engines found
          command: |
            MIRA_URL=$(sudo minikube service mira --url)
            ./.circleci/verify_qix_engines.sh $MIRA_URL

  # Job for testing Mira in dns mode
  dns:
    machine: true
    environment:
      DOCKER_REPO: qlikcore/mira
    working_directory: ~/mira
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Import previously built docker image
          command: docker load < /tmp/workspace/mira_image.tar
      - checkout
      - run:
          name: Spin up core in a local docker swarm
          command: |
            docker swarm init
            # Spin up a local setup with the previously built docker image.
            TAG=:$(cat /tmp/workspace/version.txt) ACCEPT_EULA=yes docker stack deploy -c ./examples/dns/docker-compose-dns.yml mira-dns
      - run:
          name: Check health of the Mira service
          command: |
            set +e

            # Verify Mira health
            RETRIES=0
            while (( MIRA_STATUS != "200" && RETRIES != 30 )); do
              MIRA_STATUS=$(curl -s -o /dev/null -w %{http_code} http://localhost:9100/health)
              sleep 2
              RETRIES=$((RETRIES + 1 ))
            done

            if [ "$MIRA_STATUS" != "200" ]; then
              echo "Mira did not return status code 200 on health endpoint"
              exit 1
            fi
      - run:
          name: Verify number of QIX Engines found
          command: |
            ./.circleci/verify_qix_engines.sh "http://localhost:9100"

  # Job for publishing Docker image to Docker hub
  publish:
    docker:
    - image: circleci/node:8.16.1
    working_directory: ~/mira
    environment:
      DOCKER_REPO: qlikcore/mira
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Import previously built docker image
          command: docker load < /tmp/workspace/mira_image.tar
      - run:
          name: Login to Docker
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: Push image to Docker Hub
          command: |
            docker push $DOCKER_REPO

workflows:
  version: 2
  build_test_and_publish:
    jobs:
      - build
      - swarm:
          requires:
            - build
      - kubernetes:
          requires:
            - build
      - dns:
          requires:
            - build
      - publish:
          requires:
            - build
            - swarm
            - kubernetes
            - dns
